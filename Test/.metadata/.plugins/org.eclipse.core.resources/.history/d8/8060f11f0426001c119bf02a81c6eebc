import java.util.NoSuchElementException;
import java.util.LinkedList;


class Pair<V>{
	int key;
	int value;
	public Pair(int key, V value) {
		this.key=key;
		this.value=value;
	}
	public int key() {
		return key;
	}
	public V value() {
		return value;
	}
}



public class Test_2<V> {
	int KL_size=0;
	LinkedList<Pair> [] key_list;

	public Test_2()
	{
		this.KL_size=20;
		this.key_list=new LinkedList[this.KL_size];
	}
	
	public Test_2(int capacity)
	{
		this.KL_size=capacity;		
		this.key_list=new LinkedList[this.KL_size];
		
	}
	
	public boolean containsKey(int key)
	{
		int location = key%this.KL_size;
		
		if (this.key_list[location] == null) {
			return false;		
		}
		
		for(int i=0; i<this.key_list[location].size(); i++ )
		{
			if (this.key_list[location].get(i).key() == key)
				return true;
		}
		
		return false;
	}
	
	public boolean put(int key, int value)
	{
		int location = key%this.KL_size;
		
		if (this.key_list[location] == null) {
			Pair pair = new Pair(key, value);
			this.key_list[location]= new LinkedList<Pair>();						
			this.key_list[location].add(pair);
			
			if(this.check()== true) 
				this.twice();
			
			return true;
		}
		else
		{
			if (containsKey(key) == true)
				return false;
			else
			{
				Pair pair = new Pair(key, value);
				this.key_list[location].add(pair);
								
				return true;
			}
		}
		
		
	}
	
	public boolean check()
	{
		int count=0;
		for (int i=0; i<this.KL_size;i++)
		{
			if (this.key_list[i] != null)
				count++;
		}
		double ratio_k = ((double) count)/KL_size;		
		if(ratio_k >= 0.8)
		{
			return true;
		}
		return false;
	}
	
	public void twice() {
		int temp_size=this.KL_size*2;
		LinkedList<Pair> [] tmp_key_list= new LinkedList[temp_size];	
		
		for (int i=0; i<this.KL_size;i++)
		{
			if (this.key_list[i] != null)
			{
				for(int j=0; j<this.key_list[i].size();j++)
				{
					int location = this.key_list[i].get(j).key() %temp_size;
					
					if (tmp_key_list[location] == null) {
						tmp_key_list[location]= new LinkedList<Pair>();	
						tmp_key_list[location].add(new Pair(this.key_list[i].get(j).key(), this.key_list[i].get(j).value()) );
					}
					else {
						tmp_key_list[location].add(new Pair(this.key_list[i].get(j).key(), this.key_list[i].get(j).value()) );
					}
				}
			}
		}
		this.key_list=tmp_key_list;
		this.KL_size=temp_size;
	}			

	
	public V get(int key) throws NoSuchElementException
	{
		int location = key%this.KL_size;
		
		if (this.key_list[location] == null) {
			System.out.println("None");
			throw new NoSuchElementException();
		}
		else
		{
			for(int i=0; i<this.key_list[location].size(); i++ )
			{				
				if (this.key_list[location].get(i).key() == key)
					return this.key_list[location].get(i).value();
			}
			throw new NoSuchElementException();
		}
	}
		
	public int remove(int key)
	{
		if (containsKey(key) == true)
		{
			int location = key%this.KL_size;
			for(int i=0; i<this.key_list[location].size(); i++ )
			{
				if (this.key_list[location].get(i).key() == key)
				{
					int rvalue=key_list[location].get(i).value();
					key_list[location].remove(i);
					
					return rvalue;
				}
			}
		}	
		System.out.println("no key");
		return 0;	
	}
	public void clear()
	{
		for (int i=0; i<this.KL_size; i++)
			this.key_list[i]=null;		
	}
	
	public int size() 
	{
		int count=0;
		for (int i=0; i<this.KL_size;i++)
		{
			if (this.key_list[i] != null)
				count += this.key_list[i].size();			
		}
		return count;
	}
	
	
	
	
	public static void main (String args[]) {
		
		Test_2 a= new Test_2(10);
		//System.out.println(a.size());
		a.put(1,100);
		a.put(2,100);
		a.put(3,100);
		a.put(4,100);
		a.put(5,100);
		a.put(6,100);
		a.put(7,100);
		System.out.println(a.get(1));
		a.put(7777,190);
		a.put(18,999);
		a.put(9,100);
		a.put(10,100);
		a.put(11,100);
		a.put(12,100);
		a.put(13,100);
		a.put(32,100);

		System.out.println(a.get(1));
		//System.out.println(a.get(38));
		//a.get(22);
		System.out.println(a.get(10));
		System.out.println(a.get(7777));
		a.remove(32);
		//a.remove(32);
		//a.remove(37);
		System.out.println(a.size());
		
	}

}



/*
//System.out.println("배열의 갯수"+a.size());
		//System.out.println("배열의 size"+a.KL_size);
		//a.put(6,100);
		//a.put(7,100);
		//a.put(8,100);
		//a.put(9,100);
		//a.put(10,100);
		//System.out.println("배열의 갯수"+a.size());
		//System.out.println("배열의 size"+a.KL_size);
		//a.put(11,200);
		//a.put(12,200);
		//a.put(13,200);
		//a.put(14,200);
		//System.out.println("배열의 갯수"+a.size());
		//System.out.println("배열의 size"+a.KL_size);
		//a.put(15,200);
		//a.put(16,200);
		//a.put(17,200);
		//a.put(18,200);
		//a.put(19,200);
		//a.put(20,200);
		//System.out.println("배열의 갯수"+a.size());
		//System.out.println("배열의 size"+a.KL_size);
		//a.put(31,300);
		//a.put(32,300);
		//a.put(33,300);
		//a.put(34,300);
		//System.out.println("배열의 갯수"+a.size());
		//System.out.println("배열의 size"+a.KL_size);
		a.put(35,300);
		a.put(36,300);
		a.put(37,300);
		a.put(38,300);
		a.put(39,300);
		a.put(30,300);
*/
